=> What is RDBMS? Why do industries use RDBMS?
RDBMS stands for Relational Database Management System. It is a software system that is used to manage and organize data in a relational database.
RDBMS uses tables to store and organize data, where each table consists of rows and columns.Industries use RDBMS for several reasons:
Data integrity: RDBMS enforces integrity constraints and provides mechanisms to ensure the accuracy and consistency of data.
Data security: RDBMS provides security features to protect sensitive data and control access to the database.
Data scalability: RDBMS allows industries to scale their database systems as their data needs grow, ensuring that data can be efficiently managed 
and accessed even as the database size increases.

########################################################################################################################
=>Explain the relationship data model in depth.
The relationship data model is a database model that represents data as collections of related tables. It is based on the concept of a relationship between entities.
In this model, data is organized into tables, where each table represents an entity or concept, and the relationships between entities are represented through the use of keys.
In the relationship data model, tables are defined with columns that represent attributes or properties of the entities, and each row in the table represents a 
specific instance or record of that entity. Relationships between entities are established through the use of keys, which are columns or sets of columns that uniquely
identify each record in a table.
Keys play a vital role in the relationship data model. The primary key is a unique identifier for each record in a table and is used to ensure data integrity
and provide a means for linking data across different tables. Foreign keys are used to establish relationships between tables by referencing the primary key of
another table.

########################################################################################################################
=>What is the importance of Relationships in a Database management system? Explain the types of relationships.
Relationships in a Database Management System (DBMS) are important as they define the associations and connections between entities in the database.
Relationships help in organizing and representing data accurately and efficiently. They allow for data consistency, integrity, and efficient data retrieval.
There are several types of relationships commonly used in DBMS:
=>  One-to-One (1:1): In this type of relationship, one record in the first table is associated with one record in the second table, and vice versa.
For example, in a database of employees and their identification cards, each employee can have only one identification card, and each identification card belongs to only one employee.

=>  One-to-Many (1:N): In a one-to-many relationship, one record in the first table can be associated with multiple records in the second table, but each record in the second table is associated with only one record in the first table. For example, in a database of customers and their orders, each customer can have multiple orders, but each order belongs to only one customer.

=>  Many-to-One (N:1): This is the reverse of a one-to-many relationship, where multiple records in the first table are associated with a single record in the second table. For example, in a database of products and their categories, multiple products can belong to a single category.

=>  Many-to-Many (N:N): In a many-to-many relationship, multiple records in the first table can be associated with multiple records in the second table. This type of relationship is typically implemented using a join table or an intersection table. For example, in a database of students and courses, where each student can enroll in multiple courses and each course can have multiple students.

########################################################################################################################
=>Explain the different types of Keys in RDBMS considering a real-life scenario.
Primary Key: The primary key uniquely identifies each record in a table. In our university database, we can have a table called "Students" where each student has a unique student ID assigned to them.
Foreign Key: A foreign key establishes a relationship between two tables by referencing the primary key of another table. 
Candidate Key: A candidate key is a unique identifier for a record in a table, similar to a primary key.
Alternate Key: An alternate key is another term for a candidate key. It refers to a unique identifier that is not chosen as the primary key but can still be used to uniquely identify records.
Composite Key: A composite key consists of multiple attributes or columns that, together, uniquely identify a record in a table.

########################################################################################################################
=>Write a short note on Single Responsibility Principle.
Single Responsibility Principle (SRP) is a principle in software development that states that a module, class, or function should have
only one reason to change and should be responsible for only one specific task or functionality.
It promotes a clear and focused design by ensuring that each component has a single responsibility.

########################################################################################################################
=>Explain the different types of errors that could arise in a denormalized database.
Data Inconsistency: Duplicated data can lead to inconsistencies if the same data is updated in one place but not in others. Inconsistencies can result in incorrect or conflicting information.

Update Anomalies: In denormalized databases, updating data may require modifying multiple copies of the same data, increasing the chances of errors and inconsistencies during updates.

Data Redundancy: Redundant data takes up extra storage space and can lead to wasted resources. It also increases the complexity of maintaining and managing the database.
########################################################################################################################
=>What is normalization and what is the need for normalization
Normalization is the process of organizing and structuring a database to eliminate data redundancy, ensure data integrity, and improve overall database efficiency.
The need for normalization arises due to several reasons:

Data Integrity: Normalization helps in maintaining data integrity by reducing the chances of data inconsistencies or anomalies. It ensures that data is stored in a consistent and reliable manner.

Efficient Storage: Normalization reduces data redundancy by eliminating duplicated data, which leads to more efficient storage utilization. It helps in optimizing disk space and reducing storage costs.

Simplified Updates: Normalization makes updates and modifications easier by minimizing the number of places where changes need to be made. It improves data consistency and reduces the likelihood of update anomalies.

Improved Query Performance: Normalization allows for more efficient query execution by structuring data in a way that matches the usage patterns. It enables faster data retrieval and better performance of database operations.

Flexibility and Scalability: Normalization provides a flexible and scalable database design. It allows for easy expansion and modification of the database structure without causing data inconsistencies or significant disruptions.
########################################################################################################################
=> List out the different levels of Normalization and explain them in detail.
First Normal Form (1NF): In 1NF, data is organized into tables with each column containing atomic values (indivisible). It eliminates repeating groups and ensures each attribute has a single value.

Second Normal Form (2NF): 2NF builds upon 1NF and requires that each non-key attribute is fully functionally dependent on the entire primary key. It eliminates partial dependencies by moving them to separate tables.

Third Normal Form (3NF): 3NF further refines the normalization process by removing transitive dependencies. It ensures that non-key attributes are not dependent on other non-key attributes, but only on the primary key.

Boyce-Codd Normal Form (BCNF): BCNF is a stricter version of 3NF and ensures that there are no non-trivial functional dependencies between attributes. It eliminates all non-key dependencies and guarantees that every non-prime attribute is functionally dependent on the primary key.
########################################################################################################################
=> What are joins and why do we need them?
Joins are operations used to combine rows from two or more tables based on related columns.

#  We need joins to:
Retrieve related data
Perform complex queries
Ensure data integrity
########################################################################################################################
=> Explain the different types of joins? complete all these question write this question answer in short.
Inner Join: Inner join returns only the matching rows from both tables based on the specified join condition. It excludes unmatched rows from the result set.

Left Join (or Left Outer Join): Left join returns all rows from the left (or first) table and the matching rows from the right (or second) table. If there are no matches, it returns NULL values for the right table columns.

Right Join (or Right Outer Join): Right join is similar to the left join but returns all rows from the right (or second) table and the matching rows from the left (or first) table. If there are no matches, it returns NULL values for the left table columns.

Full Outer Join: Full outer join returns all rows from both tables, including unmatched rows. It combines the results of left and right joins and includes NULL values where there is no match.

Cross Join (or Cartesian Join): Cross join returns the Cartesian product of rows from both tables, resulting in all possible combinations of rows. It doesn't require any specific join condition.
